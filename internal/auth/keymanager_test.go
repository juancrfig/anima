package auth

import (
	"bytes"
	"anima/internal/crypto" 
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// DefaultParams provides the OWASP-recommended settings
var DefaultParams = &crypto.Params{
	Time:    3,
	Memory:  65536, // 64 MB
	Threads: 1,
	SaltLen: 16, // 16 bytes
	KeyLen:  32, // 32 bytes for AES-256
}

// TestKeyManager_Setup_Roundtrip proves the entire "setup" and "recover" flow.
// It proves that keys generated by 'Setup' can be recovered by 'Recover'.
func TestKeyManager_Setup_Roundtrip(t *testing.T) {
	km := NewKeyManager(DefaultParams)
	password := []byte("my-strong-password-123")

	// --- 1. SETUP ---
	// This simulates 'anima setup'
	setupResult, err := km.Setup(password)
	require.NoError(t, err)

	// Assert the results are valid
	assert.Equal(t, 32, len(setupResult.MasterKey), "Master key should be 32 bytes for AES-256")
	assert.NotEmpty(t, setupResult.RecoveryPhrase, "Should generate a recovery phrase")
	assert.NotEmpty(t, setupResult.EncryptedMasterKey, "Should generate an encrypted master key")
	assert.NotEmpty(t, setupResult.EncryptedRecoveryKey, "Should generate an encrypted recovery key")

	// --- 2. LOGIN (simulation) ---
	// This simulates 'anima login'
	// We use 'Decrypt' directly, which is what 'RecoverMasterKey' will do
	decryptedWithPass, err := crypto.Decrypt(setupResult.EncryptedMasterKey, password)
	require.NoError(t, err, "Should be able to decrypt master key with password")
	assert.Equal(t, setupResult.MasterKey, decryptedWithPass, "Decrypted master key should match original")

	// --- 3. RECOVER (simulation) ---
	// This simulates 'anima recover'
	recoveryPhraseBytes := []byte(setupResult.RecoveryPhrase)
	decryptedWithRecovery, err := crypto.Decrypt(setupResult.EncryptedRecoveryKey, recoveryPhraseBytes)
	require.NoError(t, err, "Should be able to decrypt master key with recovery phrase")
	assert.Equal(t, setupResult.MasterKey, decryptedWithRecovery, "Decrypted master key should match original")
}

// TestKeyManager_RecoverMasterKey proves the main "login" and "recover" logic.
func TestKeyManager_RecoverMasterKey(t *testing.T) {
	km := NewKeyManager(DefaultParams)
	password := []byte("my-strong-password-123")

	// 1. Generate the keys first
	setupResult, err := km.Setup(password)
	require.NoError(t, err)

	recoveryPhrase := []byte(setupResult.RecoveryPhrase)

	// --- 2. Test Good Password ---
	masterKey, err := km.RecoverMasterKey(setupResult.EncryptedMasterKey, password)
	require.NoError(t, err, "Should succeed with correct password")
	assert.Equal(t, setupResult.MasterKey, masterKey)

	// --- 3. Test Bad Password ---
	_, err = km.RecoverMasterKey(setupResult.EncryptedMasterKey, []byte("wrong-password"))
	assert.Error(t, err, "Should fail with wrong password")
	assert.ErrorIs(t, err, ErrInvalidCredentials, "Should return our specific error")

	// --- 4. Test Good Recovery Phrase ---
	masterKey, err = km.RecoverMasterKey(setupResult.EncryptedRecoveryKey, recoveryPhrase)
	require.NoError(t, err, "Should succeed with correct recovery phrase")
	assert.Equal(t, setupResult.MasterKey, masterKey)

	// --- 5. Test Bad Recovery Phrase ---
	_, err = km.RecoverMasterKey(setupResult.EncryptedRecoveryKey, []byte("wrong recovery phrase"))
	assert.Error(t, err, "Should fail with wrong recovery phrase")
	assert.ErrorIs(t, err, ErrInvalidCredentials, "Should return our specific error")
}

// TestKeyManager_GenerateRecoveryPhrase proves our generator works
func TestKeyManager_GenerateRecoveryPhrase(t *testing.T) {
	km := NewKeyManager(DefaultParams)
	
	// A 24-word phrase (256 bits) is the standard
	phrase1, err := km.GenerateRecoveryPhrase()
	require.NoError(t, err)
	assert.Equal(t, 24, len(bytes.Split([]byte(phrase1), []byte(" "))))
	
	phrase2, err := km.GenerateRecoveryPhrase()
	require.NoError(t, err)
	assert.Equal(t, 24, len(bytes.Split([]byte(phrase2), []byte(" "))))

	assert.NotEqual(t, phrase1, phrase2, "Recovery phrases should be random and unique")
}